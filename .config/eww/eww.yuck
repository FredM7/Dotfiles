(defwindow ex1
  ; :monitor '[0, 1]'
  :monitor 0
  :windowtype "toolbar" ; normal, dock, toolbar, dialog, desktop
  :exclusive "true" ; Whether the compositor should reserve space for the window.
  :stacking "fg" ; fg, bg, overlay, bottom
  ; :halign "fill"
  ;:focusable "true" ; This is necessary for any widgets that use the keyboard to work.
  :geometry (
    geometry
    ; :x "0%"
    ; :y "20px"
    :width "100%"
    ; :height "30px"
    :anchor "top center"
  )
  ; (widget :arg1 "This is a widget." :arg2 "This is a tooltip.")
  (box
    :class "main"
    (widget
      :arg1 "This is a widget."
      :arg2 "This is a tooltip."
    )
  )
)

(defwindow ex2
  ; :monitor '[0, 1]'
  :monitor 1
  ; :class "example"
  :windowtype "dock" ; normal, dock, toolbar, dialog, desktop
  :exclusive "true" ; Whether the compositor should reserve space for the window.
  :stacking "fg" ; fg, bg, overlay, bottom
  ;:focusable "true" ; This is necessary for any widgets that use the keyboard to work.
  :geometry (
    geometry
    ; :x "0%"
    ; :y "20px"
    ; :width "90%"
    ; :height "30px"
    :anchor "top center"
  )
  ; (widget :arg1 "This is a widget." :arg2 "This is a tooltip.")
  (widget
    :arg1 "This is a widget."
    :arg2 "This is a tooltip."
  )
)

(defvar something "yes")

(defwindow cal
  ; :monitor '[0, 1]'
  :monitor 0
  :class "cal"
  :windowtype "normal" ; normal, dock, toolbar, dialog, desktop
  :exclusive "false" ; Whether the compositor should reserve space for the window.
  :stacking "fg" ; fg, bg, overlay, bottom
  ;:focusable "true" ; This is necessary for any widgets that use the keyboard to work.
  :geometry (
    geometry
    ; :x "0%"
    ; :y "20px"
    :width "200px"
    :height "200px"
    :anchor "top right"
  )
  ; (widget :arg1 "This is a widget." :arg2 "This is a tooltip.")
  (calendar)
)

; (defpoll time :interval "1s"
  ;   :initial "initial-value"  ; optional, defaults to poll at startup
  ;   :run-while time-visible   ; optional, defaults to 'true'
; `date +%H:%M:%S`)

; (defpoll qwe :interval "1s"
  ;   :initial "poll"
  ;   label
; '${EWW_DISK["/home"].total}')

(defwidget widget [arg1 ?arg2] (
    box
    :class "example"
    ; :stacking "bg" ; fg, bg, overlay, bottom
    :space-evenly false
    (box
      :hexpand true
      (label :text arg1)
    )
    (cpu)
    (ram)
    (disk)
    (tray)
    (datetime)
  )
)

(defwidget cpu [] (
    box
    :class "cpu"
    (label :text `CPU: ${round(EWW_CPU.avg, 1)}%`)
  )
)

(defwidget ram [] (
    box
    :class "ram"
    (label :text `RAM: ${round(EWW_RAM.used_mem  / 1024 / 1024 / 1024, 1)} GB / ${round(EWW_RAM.total_mem / 1024 / 1024 / 1024, 1)} GB (${round(EWW_RAM.used_mem_perc, 1)}%)`)
  )
)

(defwidget disk [] (
    box
    :class "disk"
    (label :text `SSD: ${round((EWW_DISK["/home"].used) / 1024 / 1024 / 1024, 1)} GB / ${round((EWW_DISK["/home"].total) / 1024 / 1024 / 1024, 1)} GB (${round(EWW_DISK["/home"].used_perc, 1)}%)`)
  )
)

(defwidget tray [] (
    box
    :class "tray"
    :halign "end"
    (systray
      :spacing 5
      :space-evenly false
      :orientation "h"
      :icon-size 18
    )
  )
)

(defwidget datetime [] (
    box
    :class "datetime"
    (eventbox
      ; :onclick {cal-visible ? "~/Development/OpenSource/eww/target/release/eww close cal" : "~/Development/OpenSource/eww/target/release/eww open cal"}
      ; :onclick "
      ; if something == 'yes'; then
      ; ~/Development/OpenSource/eww/target/release/eww update something='no';
      ; ~/Development/OpenSource/eww/target/release/eww close cal;
      ; else
      ; ~/Development/OpenSource/eww/target/release/eww update something='yes';
      ; ~/Development/OpenSource/eww/target/release/eww open cal;
      ; fi
      ; "
      :onclick {something == 'yes' ?
      "~/Development/OpenSource/eww/target/release/eww update something='no';
      ~/Development/OpenSource/eww/target/release/eww close cal" :
      "~/Development/OpenSource/eww/target/release/eww update something='yes';
      ~/Development/OpenSource/eww/target/release/eww open cal"}
      (label :text `${formattime(EWW_TIME, "%a %d %b %H:%M:%S")}` :xalign 0)
    )
    ; something
  )
)